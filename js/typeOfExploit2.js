
var colors = ['#fb8072', '#80b1d3', '#fdb462', '#b3de69', '#fccde5', '#d9d9d9', '#8dd3c7'];
var barHeight = 100;

var tooltip = d3.select('#barChart')
    .append('div')
    .style('position', 'absolute')
    .style('visibility', 'hidden');

var types = ['forced labour', 'forced marriage', 'combined sexual and labour exploitation', 'sexual exploitation', 'slavery and similar practice', 'other', 'unknown']
var beginYear = 2002;
var endYear = 2018;

function createExploit2() {
    humanTraffickingData.sort(function (a, b) {
        var textA = a['Type Of Exploitation'];
        var textB = b['Type Of Exploitation'];
        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
    })

    years = []
    for (var year = beginYear; year <= endYear; year++) {
        //var temp = new Date("" + year);
        years.push(year + "");
    }

    datas = {}
    for (var i = 0; i < years.length; i++) {
        datas[years[i]] = {};
        for (var j = 0; j < types.length; j++) {
            datas[years[i]][types[j]] = 0;
        };
        datas[years[i]]["total"] = 0;
    };

    humanTraffickingData.forEach(row => {
        var year = row['Year of Registration'];
        var splits = row['Type Of Exploitation'].split(';');
        splits.forEach(function (s) {
            s = s.trim().toLowerCase();
            datas[year][s] += 1;
            datas[year]["total"] += 1;
        });
    });

    maxCount = 0;
    data = []
    for (var i = 0; i < years.length; i++) {
        if (datas[years[i]]["total"] > maxCount) {
            maxCount = datas[years[i]]["total"];
        };
        temp = datas[years[i]];
        temp["year"] = years[i];
        data.push(temp);
    };
}

function updateTypoeOfExploit2() {
    svg.selectAll('*').remove();

    createExploit2();

    var margin = { top: 150, right: 200, bottom: 40, left: 50 }
    var w = width - margin.left - margin.right;
    var h = height - margin.top - margin.bottom;

    var xScale = d3.scaleTime()
        .domain([new Date('2002'), new Date('2019')])
        .range([10, w - 10]);

    var yScale = d3.scaleLinear()
        .domain([0, maxCount])
        .range([h, 0]);

    var colorScale = d3.scaleOrdinal()
        .domain(types)
        .range(colors)

    // Create a group element for appending chart elements
    var chartG = svg
        .append('g')
        .attr('transform', 'translate(' + [margin.left, margin.top] + ')');

    var title = chartG.append('text')
        .attr('id', 'title')
        .attr('x', width / 2 - margin.right)
        .attr('y', 0 - (margin.top / 4))
        .attr('text-anchor', 'middle')
        .attr('fill', '#eee')
        .style('font-size', '40px')
        .style('opacity', '0')
        .text("Type of Exploit Over Time");

    // Define and draw axes
    var xAxisG = chartG.append('g')
        .attr('class', 'x axis')
        .attr('transform', 'translate(' + [0, h] + ')');

    var yAxisG = chartG.append('g')
        .attr('class', 'y axis');

    xAxisG.transition()
        .duration(750)
        .call(d3.axisBottom(xScale).ticks(17).tickFormat(d3.timeFormat("%Y")));
    yAxisG.transition()
        .duration(750)
        .call(d3.axisLeft(yScale));
    title.transition()
        .duration(750)
        .style('opacity', '1');

    chartG.append("g").selectAll("g")
        .data(d3.stack().keys(types)(data))
        .enter().append("g")
        .attr("fill", function (d) { return colorScale(d.key); })
        .selectAll("rect")
        .data(function (d) {
            for (var i = 0; i < d.length; i++) {
                d[i]["key"] = d.key;
            }
            return d;
        })
        .enter().append("rect")
        .attr("x", function (d) { return xScale(new Date(d.data["year"])); })
        .attr("y", function (d) { return yScale(d[1]); })
        .attr("height", function (d) { return yScale(d[0]) - yScale(d[1]); })
        .attr("width", w / 18)
        .on("mouseover", function () { tooltip.style("display", null); })
        .on("mouseout", function () { tooltip.style("display", "none"); })
        .on("mousemove", function (d) {
            var xPosition = d3.mouse(this)[0] + margin.left;
            var yPosition = d3.mouse(this)[1] + 90;
            tooltip.attr("transform", "translate(" + [xPosition, yPosition] + ")");
            tooltip.select(".text1").text(d.key);
            tooltip.select(".text2").text(d[1] - d[0]);
        });

    // Draw legend
    var legend = svg.selectAll(".legend")
        .data(colors)
        .enter().append("g")
        .attr("class", "legend")
        .attr("transform", function (d, i) { return "translate(" + [margin.left, margin.top + i * 19] + ")"; });

    legend.append("rect")
        .attr("x", w - 18)
        .attr("width", 18)
        .attr("height", 18)
        .style("fill", function (d, i) { return colors[i]; });

    legend.append("text")
        .attr("x", w + 5)
        .attr("y", 9)
        .attr("dy", ".35em")
        .style("text-anchor", "start")
        .style('fill', '#eee')
        .text(function (d, i) { return types[i]; });

    // Prep the tooltip bits, initial display is hidden
    var tooltip = svg.append("g")
        .attr("id", "tooltip")
        .style("display", "none");

    tooltip.append("rect")
        .attr("width", 100)
        .attr("height", 50)
        .attr("fill", "white")
        .style("opacity", 0.5);

    tooltip.append("text")
        .attr("class", "text1")
        .attr("x", 50)
        .attr("dy", "1.2em")
        .style("text-anchor", "middle")
        .attr("font-size", "15px")
        .attr("font-weight", "bold");

    tooltip.append("text")
        .attr("class", "text2")
        .attr("x", 50)
        .attr("y", 25)
        .attr("dy", "1.2em")
        .style("text-anchor", "middle")
        .attr("font-size", "12px")
        .attr("font-weight", "bold");
    // chart.exit().remove();
    // exploit_label.exit().remove();
    // count_label.exit().remove();
    // percent_label.exit().remove();
}

function onToEYearChanged() {
    var select = d3.select('#toe_yearSelector').property('value');

    updateTypoeOfExploit(select);
}