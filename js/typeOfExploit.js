
var colors = ["#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#8dd3c7", "#ffffb3", "#bebada"];
var barHeight = 100;

var tooltip = d3.select("#barChart")
    .append("div")
    .style("position", "absolute")
    .style("visibility", "hidden");

function createExploit() {
    humanTraffickingData.sort(function (a, b) {
        var textA = a['Type Of Exploitation'];
        var textB = b['Type Of Exploitation'];
        return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
    })

    exploit_counts = {};
    // now look at Type of Explotation column, split and find frequency of each type of exploits
    humanTraffickingData.forEach(row => {
        year = row['Year of Registration'];
        if (!exploit_counts[year]) { exploit_counts[year] = {}; }
        splits = row['Type Of Exploitation'].split(";");
        splits.forEach(function (s) {
            // console.log(splits,s);
            if (!exploit_counts[year][s]) {
                // console.log(s);
                exploit_counts[year][s] = 1
            } else {
                // console.log(exploit_counts[s]);
                exploit_counts[year][s]++;
            }
        })
    });//end of forEach for dataset
}

function updateTypoeOfExploit(year, removeAll = false) {
    if (removeAll) {
        svg.selectAll('*').remove();
    }

    createExploit();

    if (year == 'all-years') {
        cur_data = {};
        Object.keys(exploit_counts).forEach(function (year) {
            Object.keys(exploit_counts[year]).forEach(function (type) {
                if (!cur_data[type]) cur_data[type] = exploit_counts[year][type];
                else cur_data[type] = cur_data[type] + exploit_counts[year][type];
            })
        });
        // console.log(cur_data);
    }
    else cur_data = exploit_counts[year];

    exploit_types = Object.keys(cur_data);
    total_count = d3.sum(Object.values(cur_data)); //console.log(total_count)
    var xScale = d3.scaleLinear()
        .domain([0, total_count])
        .range([0, width]);


    // bar chart
    let cumulative = 0;
    var chart = svg.selectAll('.exploit_chart')
        .data(exploit_types);

    var chartEnter = chart.enter()
        .append("rect")
        .attr("class", 'exploit_chart');

    chart.merge(chartEnter)
        .attr("y", height / 2 - barHeight / 2)
        .attr("x", function (d, i) {
            cumulative = cumulative + cur_data[d];
            return xScale(cumulative - cur_data[d]);
        })
        .attr("width", function (d) { return xScale(cur_data[d]); })
        .attr("height", barHeight)

        .style("fill", function (d, i) {
            return colors[i];
        });


    // type of exploit text labels
    cumulative = 0;
    var exploit_label = svg.selectAll(".exploit_label")
        .data(exploit_types);

    var exploit_lable_enter = exploit_label.enter()
        .append("text")
        .attr("class", "exploit_label")
        //   .attr("text-anchor","middle")
        .text(function (d) { return d; });

    exploit_label.merge(exploit_lable_enter)
        .attr("y", height / 2 + (barHeight / 2) * 1.3)
        .attr("x", function (d) {
            cumulative = cumulative + cur_data[d];
            cur_value = cumulative - cur_data[d];
            return xScale(cumulative - cur_data[d]);
        })
        .style("opacity", function (d) {
            if (xScale(cur_data[d]) < 10) {
                return "0";
                ;
            };
        })
        .style("fill", function (d, i) { return colors[i]; });


    // count lables
    cumulative = 0;
    var count_label = svg.selectAll(".count_label")
        .data(exploit_types)

    var count_label_enter = count_label.enter()
        .append("text")
        .attr("class", "count_label")
        .text(function (d) { return cur_data[d]; })
        .style("fill", "#ffffff");

    count_label.merge(count_label_enter)
        .attr("x", function (d) {
            cumulative = cumulative + cur_data[d];
            return xScale(cumulative - cur_data[d]);
        })
        .attr("y", height / 2 + 5)
        .style("opacity", function (d) {
            if (xScale(cur_data[d]) < 10) {
                return "0";
                ;
            };
        });


    // percent label
    cumulative = 0;
    var percent_label = svg.selectAll(".percent_label")
        .data(exploit_types)

    var percent_label_enter = percent_label.enter()
        .append("text")
        .attr("class", "percent_label");

    percent_label.merge(percent_label_enter)
        .attr("x", function (d) {
            cumulative = cumulative + cur_data[d];
            return xScale(cumulative - cur_data[d]);
        })
        .attr('y', height / 2 - barHeight / 2 * 1.1)
        .style("opacity", function (d) {
            if (xScale(cur_data[d]) < 10) {
                return "0";
                ;
            };
        })
        .text(function (d) {
            val = (cur_data[d] / total_count) * 100;
            return val.toFixed(2) + " %";
        });

    chart.exit().remove();
    exploit_label.exit().remove();
    count_label.exit().remove();
    percent_label.exit().remove();
}

function onToEYearChanged() {
    var select = d3.select('#toe_yearSelector').property('value');

    updateTypoeOfExploit(select);
}